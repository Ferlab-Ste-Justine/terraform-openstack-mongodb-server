#cloud-config
fqdn: ${mongodb_server.domain}
hostname: ${mongodb_server.domain}
prefer_fqdn_over_hostname: true
preserve_hostname: false
users:
  - default
  - name: node-exporter
    system: true
    lock_passwd: true
write_files:
  #Prometheus node exporter systemd configuration
  - path: /etc/systemd/system/node-exporter.service
    owner: root:root
    permissions: "0444"
    content: |
      [Unit]
      Description="Prometheus Node Exporter"
      Wants=network-online.target
      After=network-online.target

      [Service]
      User=node-exporter
      Group=node-exporter
      Type=simple
      ExecStart=/usr/local/bin/node_exporter

      [Install]
      WantedBy=multi-user.target
  #Replicaset key file
  - path: /opt/keyfile
    owner: root:root
    permissions: "0400"
    content: ${mongodb_replicaset.key}
  #TLS files
  - path: /opt/mongodb-keyfile.pem
    owner: root:root
    permissions: "0400"
    content: |
      ${indent(6, join("", [tls_private_key, tls_certificate]))}
  - path: /opt/mongodb-ca-cert.pem
    owner: root:root
    permissions: "0400"
    content: |
      ${indent(6, tls_ca_certificate)}
  #Mongodb Node configuration
  - path: /opt/node-config
    owner: root:root
    permissions: "0444"
    content: |
      net:
        bindIp: 0.0.0.0
        port: 27017
        tls:
          allowConnectionsWithoutCertificates: true
          allowInvalidCertificates: false
          mode: requireTLS
          certificateKeyFile: /opt/mongodb-keyfile.pem
          CAFile: /opt/mongodb-ca-cert.pem
          clusterFile: /opt/mongodb-keyfile.pem
          clusterCAFile: /opt/mongodb-ca-cert.pem
      security:
        authorization: enabled
        keyFile: /opt/keyfile
      replication:
        replSetName: ${mongodb_replicaset.name}
  #Mongodb Replicaset configuration
  - path: /opt/rs-config.js
    owner: root:root
    permissions: "0444"
    content: |
      const config = {
        _id : "${mongodb_replicaset.name}",
        members: [
%{ for idx in range(0, length(mongodb_replicaset.members)) ~}
          {
            _id: ${idx},
            host: "${mongodb_replicaset.members[idx]}:27017",
            //It complexifies setup if we don't ensure the node that initializes the rs
            //also becomes the master when initially doing the setup
            priority: ${mongodb_replicaset.members[idx] == mongodb_server.domain && mongodb_server.bootstrap_cluster ? 1 : 0.5}
          }, 
%{ endfor ~}
        ]
      }
  #Mongodb Replicaset init scripts
  - path: /opt/setReplicaset.js
    owner: root:root
    permission: "0700"
    content: |
      //Initiate replicaset
      load('/opt/rs-config.js');
      var replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      while(replicasetStatus.codeName == "NotYetInitialized") {
        rs.initiate(config);
        sleep(1000);
        replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      }

      //Create admin user
      replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      while(replicasetStatus.members[0].stateStr != "PRIMARY") {
        sleep(1000);
        replicasetStatus = db.adminCommand( { replSetGetStatus: 1 } );
      }
      
      db.createUser(
        {
          user: "admin",
          pwd: "${mongodb_replicaset.admin_password}",
          roles: [ 
            { role: "userAdminAnyDatabase", db: "admin" },
            { role: "readWriteAnyDatabase", db: "admin" },
            { role: "dbAdminAnyDatabase", db: "admin" },
            { role: "clusterAdmin", db: "admin" }
          ]
        }
      );

      db.auth("admin", "${mongodb_replicaset.admin_password}");

      //equilibrate election priorities after we are done with setup
      const rs_count = ${length(mongodb_replicaset.members)};
      var idx = 0;
      var cfg = rs.conf();
      while(idx < rs_count) {
        cfg.members[idx].priority = 1;
        idx += 1;
      }
      rs.reconfig(cfg);
  - path: /opt/setReplicaset.sh
    owner: root:root
    permission: "0700"
    content: |
      #!/bin/bash
      #If node is tagged as the initializer, initiate the replicaset
      #MongoDB requires that only one node initalize the replicaset 
%{ if mongodb_server.bootstrap_cluster ~}
      #Wait for domain to be up
      SELF_IP=$(dig +short dig +short ${mongodb_server.domain})
      while [ -z "$SELF_IP" ]
      do
        echo "Domain not yet up, will sleep 1 second"
        sleep 1
        SELF_IP=$(dig +short dig +short ${mongodb_server.domain})
      done
      #Wait for mongodb server to be up
      MONGO_UP=$(docker logs mongodb | grep -i "waiting for connections")
      while [ -z "$MONGO_UP" ]
      do
        sleep 1
        MONGO_UP=$(docker logs mongodb | grep -i "waiting for connections")
      done
      MONGO_VERSION=$(echo "${mongodb_server.image}" | cut -d':' -f2)
      if [[ "${MONGO_VERSION}" =~ ^[1-4](\.|$) ]]; then
        MONGO_SHELL="mongo"
      else
        MONGO_SHELL="mongosh"
      fi
      docker run --rm --network host -v /etc/hosts:/etc/hosts -v /opt/setReplicaset.js:/opt/setReplicaset.js -v /opt/rs-config.js:/opt/rs-config.js -v /opt/mongodb-ca-cert.pem:/opt/mongodb-ca-cert.pem ${mongodb_server.image} ${MONGO_SHELL} --tls --tlsCAFile /opt/mongodb-ca-cert.pem mongodb://127.0.0.1:27017/admin /opt/setReplicaset.js
%{ endif ~}
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - software-properties-common
runcmd:
  #Add dns servers
  - echo "DNS=${join(" ", mongodb_server.nameserver_ips)}" >> /etc/systemd/resolved.conf
  - systemctl stop systemd-resolved
  - systemctl start systemd-resolved
  #Install prometheus node exporter as a binary managed as a systemd service
  - wget -O /opt/node_exporter.tar.gz https://github.com/prometheus/node_exporter/releases/download/v1.3.0/node_exporter-1.3.0.linux-amd64.tar.gz
  - mkdir -p /opt/node_exporter
  - tar zxvf /opt/node_exporter.tar.gz -C /opt/node_exporter
  - cp /opt/node_exporter/node_exporter-1.3.0.linux-amd64/node_exporter /usr/local/bin/node_exporter
  - chown node-exporter:node-exporter /usr/local/bin/node_exporter
  - rm -r /opt/node_exporter && rm /opt/node_exporter.tar.gz
  - systemctl enable node-exporter
  - systemctl start node-exporter
  #Install mongodb as a background docker container
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io
  - systemctl enable docker
  - docker run --rm --entrypoint="" -v /opt/keyfile:/opt/keyfile -v /opt/mongodb-keyfile.pem:/opt/mongodb-keyfile.pem -v /opt/mongodb-ca-cert.pem:/opt/mongodb-ca-cert.pem  ${mongodb_server.image} chown mongodb /opt/keyfile /opt/mongodb-keyfile.pem /opt/mongodb-ca-cert.pem
  - docker run -d --restart=always --name=mongodb --network=host -v /opt/mongodb-data:/data/db -v /opt/node-config:/opt/node-config -v /opt/keyfile:/opt/keyfile -v /opt/mongodb-keyfile.pem:/opt/mongodb-keyfile.pem -v /opt/mongodb-ca-cert.pem:/opt/mongodb-ca-cert.pem ${mongodb_server.image} mongod --config /opt/node-config
  #Initiate replicaset
  - chmod +x /opt/setReplicaset.sh
  - /opt/setReplicaset.sh
  - rm /opt/setReplicaset.sh /opt/setReplicaset.js